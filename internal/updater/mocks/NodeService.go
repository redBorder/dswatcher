// Code generated by mockery v1.0.0
package mocks

import chef "github.com/go-chef/chef"
import mock "github.com/stretchr/testify/mock"

// NodeService is an autogenerated mock type for the NodeService type
type NodeService struct {
	mock.Mock
}

// Get provides a mock function with given fields: _a0
func (_m *NodeService) Get(_a0 string) (chef.Node, error) {
	ret := _m.Called(_a0)

	var r0 chef.Node
	if rf, ok := ret.Get(0).(func(string) chef.Node); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(chef.Node)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *NodeService) List() (map[string]string, error) {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Put provides a mock function with given fields: _a0
func (_m *NodeService) Put(_a0 chef.Node) (chef.Node, error) {
	ret := _m.Called(_a0)

	var r0 chef.Node
	if rf, ok := ret.Get(0).(func(chef.Node) chef.Node); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(chef.Node)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(chef.Node) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
